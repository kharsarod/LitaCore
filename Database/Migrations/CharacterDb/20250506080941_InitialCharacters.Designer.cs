// <auto-generated />
using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations.CharacterDb
{
    [DbContext(typeof(CharacterDbContext))]
    [Migration("20250506080941_InitialCharacters")]
    partial class InitialCharacters
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Database.Player.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("accountid");

                    b.Property<int>("Act4DeadCount")
                        .HasColumnType("int")
                        .HasColumnName("act4deadcount");

                    b.Property<int>("Act4Points")
                        .HasColumnType("int")
                        .HasColumnName("act4points");

                    b.Property<int>("Act4Victims")
                        .HasColumnType("int")
                        .HasColumnName("act4victims");

                    b.Property<string>("Biography")
                        .HasColumnType("longtext")
                        .HasColumnName("biography");

                    b.Property<byte>("Class")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("class");

                    b.Property<short>("Compliments")
                        .HasColumnType("smallint")
                        .HasColumnName("compliments");

                    b.Property<bool>("CursorAimLock")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("cursoraimlock");

                    b.Property<float>("Dignity")
                        .HasColumnType("float")
                        .HasColumnName("dignity");

                    b.Property<long>("Exp")
                        .HasColumnType("bigint")
                        .HasColumnName("exp");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("gender");

                    b.Property<long>("Gold")
                        .HasColumnType("bigint")
                        .HasColumnName("gold");

                    b.Property<byte>("HairColor")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("haircolor");

                    b.Property<byte>("HairStyle")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("hairstyle");

                    b.Property<int>("Health")
                        .HasColumnType("int")
                        .HasColumnName("health");

                    b.Property<long>("HeroExp")
                        .HasColumnType("bigint")
                        .HasColumnName("heroexp");

                    b.Property<byte>("HeroLevel")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("herolevel");

                    b.Property<bool>("IsArenaChampion")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isarenachampion");

                    b.Property<bool>("IsBlockedBuff")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isblockedbuff");

                    b.Property<bool>("IsBlockedHat")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isblockedhat");

                    b.Property<bool>("IsBlockedHud")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isblockedhud");

                    b.Property<bool>("IsDisplayCdBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isdisplaycdblocked");

                    b.Property<bool>("IsDisplayHealthBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isdisplayhealthblocked");

                    b.Property<bool>("IsEmoticonBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isemoticonblocked");

                    b.Property<bool>("IsExchangeBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isexchangeblocked");

                    b.Property<bool>("IsFamilyRequestBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isfamilyrequestblocked");

                    b.Property<bool>("IsFriendRequestBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isfriendrequestblocked");

                    b.Property<bool>("IsGroupRequestBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isgrouprequestblocked");

                    b.Property<bool>("IsHealthBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ishealthblocked");

                    b.Property<bool>("IsHeroChatBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isherochatblocked");

                    b.Property<bool>("IsMinilandInviteBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isminilandinviteblocked");

                    b.Property<bool>("IsPartnerAutoRelive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ispartnerautorelive");

                    b.Property<bool>("IsPetAutoRelive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ispetautorelive");

                    b.Property<bool>("IsQuickGetUpBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isquickgetupblocked");

                    b.Property<bool>("IsWhispBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("iswhispblocked");

                    b.Property<long>("JobExp")
                        .HasColumnType("bigint")
                        .HasColumnName("jobexp");

                    b.Property<byte>("JobLevel")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("joblevel");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("level");

                    b.Property<int>("Mana")
                        .HasColumnType("int")
                        .HasColumnName("mana");

                    b.Property<short>("MapId")
                        .HasColumnType("smallint")
                        .HasColumnName("mapid");

                    b.Property<short>("MapPosX")
                        .HasColumnType("smallint")
                        .HasColumnName("mapposx");

                    b.Property<short>("MapPosY")
                        .HasColumnType("smallint")
                        .HasColumnName("mapposy");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("int")
                        .HasColumnName("maxhealth");

                    b.Property<int>("MaxMana")
                        .HasColumnType("int")
                        .HasColumnName("maxmana");

                    b.Property<byte>("MaxPets")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("maxpets");

                    b.Property<string>("MinilandMsg")
                        .HasColumnType("longtext")
                        .HasColumnName("minilandmsg");

                    b.Property<short>("MinilandPts")
                        .HasColumnType("smallint")
                        .HasColumnName("minilandpts");

                    b.Property<bool>("MinilandState")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("minilandstate");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<long>("RagePts")
                        .HasColumnType("bigint")
                        .HasColumnName("ragepts");

                    b.Property<int>("Reputation")
                        .HasColumnType("int")
                        .HasColumnName("reputation");

                    b.Property<byte>("Slot")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("slot");

                    b.Property<int>("SpecialistAddPts")
                        .HasColumnType("int")
                        .HasColumnName("specialistaddpts");

                    b.Property<int>("SpecialistPts")
                        .HasColumnType("int")
                        .HasColumnName("specialistpts");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("state");

                    b.Property<int>("TalentArenaLoses")
                        .HasColumnType("int")
                        .HasColumnName("talentarenaloses");

                    b.Property<int>("TalentArenaSurrender")
                        .HasColumnType("int")
                        .HasColumnName("talentarenasurrender");

                    b.Property<int>("TalentArenaWins")
                        .HasColumnType("int")
                        .HasColumnName("talentarenawins");

                    b.HasKey("Id");

                    b.ToTable("characters", (string)null);
                });

            modelBuilder.Entity("Database.Player.CharacterItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<short>("Ammo")
                        .HasColumnType("smallint")
                        .HasColumnName("ammo");

                    b.Property<short>("Amount")
                        .HasColumnType("smallint")
                        .HasColumnName("amount");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int")
                        .HasColumnName("characterid");

                    b.Property<short>("CloseDefence")
                        .HasColumnType("smallint")
                        .HasColumnName("closedefence");

                    b.Property<short>("CritLuckRate")
                        .HasColumnType("smallint")
                        .HasColumnName("critluckrate");

                    b.Property<short>("CritRate")
                        .HasColumnType("smallint")
                        .HasColumnName("critrate");

                    b.Property<short>("DefDodge")
                        .HasColumnType("smallint")
                        .HasColumnName("defdodge");

                    b.Property<short>("DistDefence")
                        .HasColumnType("smallint")
                        .HasColumnName("distdefence");

                    b.Property<int>("EquipmentSlot")
                        .HasColumnType("int")
                        .HasColumnName("equipmentslot");

                    b.Property<byte>("FairyLevel")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("fairylevel");

                    b.Property<int>("FairyMonsterRemaining")
                        .HasColumnType("int")
                        .HasColumnName("fairymonsterremaining");

                    b.Property<short>("HitRate")
                        .HasColumnType("smallint")
                        .HasColumnName("hitrate");

                    b.Property<short>("HoldingModel")
                        .HasColumnType("smallint")
                        .HasColumnName("holdingmodel");

                    b.Property<int>("InventoryType")
                        .HasColumnType("int")
                        .HasColumnName("inventorytype");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isfixed");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("itemid");

                    b.Property<short>("MagicDefence")
                        .HasColumnType("smallint")
                        .HasColumnName("magicdefence");

                    b.Property<short>("MaxDmg")
                        .HasColumnType("smallint")
                        .HasColumnName("maxdmg");

                    b.Property<short>("MinDmg")
                        .HasColumnType("smallint")
                        .HasColumnName("mindmg");

                    b.Property<byte>("Rarity")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("rarity");

                    b.Property<int>("Slot")
                        .HasColumnType("int")
                        .HasColumnName("slot");

                    b.Property<DateTime>("TimeRemaining")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timeremaining");

                    b.Property<byte>("Upgrade")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("upgrade");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("character_items", (string)null);
                });

            modelBuilder.Entity("Database.Player.CharacterItem", b =>
                {
                    b.HasOne("Database.Player.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });
#pragma warning restore 612, 618
        }
    }
}
