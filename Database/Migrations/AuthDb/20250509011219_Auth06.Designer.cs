// <auto-generated />
using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations.AuthDb
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20250509011219_Auth06")]
    partial class Auth06
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Database.Player.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ipaddress");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isbanned");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isonline");

                    b.Property<int>("Language")
                        .HasColumnType("int")
                        .HasColumnName("language");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastlogin");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<byte>("Rank")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("rank");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("Database.Server.BnInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message");

                    b.HasKey("Id");

                    b.ToTable("scrolling_messages", (string)null);
                });

            modelBuilder.Entity("Database.Server.ChannelInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("ChannelId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("channelid");

                    b.Property<int>("ChannelPort")
                        .HasColumnType("int")
                        .HasColumnName("channelport");

                    b.Property<int>("ChannelStatus")
                        .HasColumnType("int")
                        .HasColumnName("channelstatus");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ipaddress");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int")
                        .HasColumnName("maxplayers");

                    b.Property<int>("OnlinePlayers")
                        .HasColumnType("int")
                        .HasColumnName("onlineplayers");

                    b.Property<byte>("ServerId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("serverid");

                    b.HasKey("Id");

                    b.ToTable("channels", (string)null);
                });

            modelBuilder.Entity("Database.Server.ServerInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ipaddress");

                    b.Property<byte>("ServerId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("serverid");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("servername");

                    b.Property<bool>("UnderMaintenance")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("undermaintenance");

                    b.HasKey("Id");

                    b.ToTable("servers", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
