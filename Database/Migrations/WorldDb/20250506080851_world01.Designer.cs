// <auto-generated />
using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations.WorldDb
{
    [DbContext(typeof(WorldDbContext))]
    [Migration("20250506080851_world01")]
    partial class world01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Database.Item.BCard", b =>
                {
                    b.Property<int>("BCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bcardid");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BCardId"));

                    b.Property<short?>("BuffId")
                        .HasColumnType("smallint")
                        .HasColumnName("buffid");

                    b.Property<byte>("CastType")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("casttype");

                    b.Property<int>("FirstEffectValue")
                        .HasColumnType("int")
                        .HasColumnName("firsteffectvalue");

                    b.Property<bool>("IsLevelDivided")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isleveldivided");

                    b.Property<bool>("IsLevelScaled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("islevelscaled");

                    b.Property<short?>("ItemId")
                        .HasColumnType("smallint")
                        .HasColumnName("itemid");

                    b.Property<short?>("VNum")
                        .HasColumnType("smallint")
                        .HasColumnName("VNum");

                    b.Property<int>("SecondaryEffectValue")
                        .HasColumnType("int")
                        .HasColumnName("secondaryeffectvalue");

                    b.Property<short?>("SkillVNum")
                        .HasColumnType("smallint")
                        .HasColumnName("skillvnum");

                    b.Property<int>("SubType")
                        .HasColumnType("int")
                        .HasColumnName("subtype");

                    b.Property<int>("ThirdEffectValue")
                        .HasColumnType("int")
                        .HasColumnName("thirdeffectvalue");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("BCardId");

                    b.HasIndex("ItemId");

                    b.ToTable("bcards", (string)null);
                });

            modelBuilder.Entity("Database.Item.Item", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<int>("AttackType")
                        .HasColumnType("int")
                        .HasColumnName("attacktype");

                    b.Property<byte>("CellonLevel")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("cellonlevel");

                    b.Property<short>("CloseDefence")
                        .HasColumnType("smallint")
                        .HasColumnName("closedefence");

                    b.Property<byte>("Color")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("color");

                    b.Property<short>("Concentrate")
                        .HasColumnType("smallint")
                        .HasColumnName("concentrate");

                    b.Property<byte>("CriticalLuckRate")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("criticalluckrate");

                    b.Property<short>("CriticalRate")
                        .HasColumnType("smallint")
                        .HasColumnName("criticalrate");

                    b.Property<short>("DamageMaximum")
                        .HasColumnType("smallint")
                        .HasColumnName("damagemaximum");

                    b.Property<short>("DamageMinimum")
                        .HasColumnType("smallint")
                        .HasColumnName("damageminimum");

                    b.Property<byte>("DarkElement")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("darkelement");

                    b.Property<short>("DarkResistance")
                        .HasColumnType("smallint")
                        .HasColumnName("darkresistance");

                    b.Property<byte>("DefaultUpgrade")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("defaultupgrade");

                    b.Property<short>("DefenceDodge")
                        .HasColumnType("smallint")
                        .HasColumnName("defencedodge");

                    b.Property<short>("DistanceDefence")
                        .HasColumnType("smallint")
                        .HasColumnName("distancedefence");

                    b.Property<short>("DistanceDefenceDodge")
                        .HasColumnType("smallint")
                        .HasColumnName("distancedefencedodge");

                    b.Property<short>("Effect")
                        .HasColumnType("smallint")
                        .HasColumnName("effect");

                    b.Property<int>("EffectData")
                        .HasColumnType("int")
                        .HasColumnName("effectdata");

                    b.Property<byte>("Element")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("element");

                    b.Property<short>("ElementRate")
                        .HasColumnType("smallint")
                        .HasColumnName("elementrate");

                    b.Property<int>("EquipmentTypeSlot")
                        .HasColumnType("int")
                        .HasColumnName("equipmenttypeslot");

                    b.Property<byte>("FireElement")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("fireelement");

                    b.Property<short>("FireResistance")
                        .HasColumnType("smallint")
                        .HasColumnName("fireresistance");

                    b.Property<bool>("Flag7")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("flag7");

                    b.Property<bool>("FollowMouseOnUse")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("followmouseonuse");

                    b.Property<byte>("Height")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("height");

                    b.Property<short>("HitRate")
                        .HasColumnType("smallint")
                        .HasColumnName("hitrate");

                    b.Property<short>("Hp")
                        .HasColumnType("smallint")
                        .HasColumnName("hp");

                    b.Property<short>("HpRegeneration")
                        .HasColumnType("smallint")
                        .HasColumnName("hpregeneration");

                    b.Property<bool>("IsColored")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("iscolored");

                    b.Property<bool>("IsConsumable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isconsumable");

                    b.Property<bool>("IsDroppable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isdroppable");

                    b.Property<bool>("IsHeroic")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isheroic");

                    b.Property<bool>("IsHolder")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isholder");

                    b.Property<bool>("IsLimited")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("islimited");

                    b.Property<bool>("IsMinilandBlocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isminilandblocked");

                    b.Property<bool>("IsMinilandObject")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isminilandobject");

                    b.Property<bool>("IsPartnerSp")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ispartnersp");

                    b.Property<bool>("IsSoldable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("issoldable");

                    b.Property<bool>("IsTimeSpaceRewardBox")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("istimespacerewardbox");

                    b.Property<bool>("IsTradable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("istradable");

                    b.Property<bool>("IsWarehouse")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("iswarehouse");

                    b.Property<byte>("ItemSubType")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("itemsubtype");

                    b.Property<int>("ItemType")
                        .HasColumnType("int")
                        .HasColumnName("itemtype");

                    b.Property<long>("ItemValidTime")
                        .HasColumnType("bigint")
                        .HasColumnName("itemvalidtime");

                    b.Property<byte>("LevelJobMinimum")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("leveljobminimum");

                    b.Property<byte>("LevelMinimum")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("levelminimum");

                    b.Property<byte>("LightElement")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("lightelement");

                    b.Property<short>("LightResistance")
                        .HasColumnType("smallint")
                        .HasColumnName("lightresistance");

                    b.Property<short>("MagicDefence")
                        .HasColumnType("smallint")
                        .HasColumnName("magicdefence");

                    b.Property<short>("MaxCellon")
                        .HasColumnType("smallint")
                        .HasColumnName("maxcellon");

                    b.Property<short>("MaxCellonLvl")
                        .HasColumnType("smallint")
                        .HasColumnName("maxcellonlvl");

                    b.Property<short>("MaxElementRate")
                        .HasColumnType("smallint")
                        .HasColumnName("maxelementrate");

                    b.Property<byte>("MaximumAmmo")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("maximumammo");

                    b.Property<int>("MinilandObjectPoint")
                        .HasColumnType("int")
                        .HasColumnName("minilandobjectpoint");

                    b.Property<short>("Model")
                        .HasColumnType("smallint")
                        .HasColumnName("model");

                    b.Property<short>("MoreHp")
                        .HasColumnType("smallint")
                        .HasColumnName("morehp");

                    b.Property<short>("MoreMp")
                        .HasColumnType("smallint")
                        .HasColumnName("moremp");

                    b.Property<short>("Mp")
                        .HasColumnType("smallint")
                        .HasColumnName("mp");

                    b.Property<short>("MpRegeneration")
                        .HasColumnType("smallint")
                        .HasColumnName("mpregeneration");

                    b.Property<byte>("PartnerClass")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("partnerclass");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<short>("PvpDefence")
                        .HasColumnType("smallint")
                        .HasColumnName("pvpdefence");

                    b.Property<byte>("PvpStrength")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("pvpstrength");

                    b.Property<short>("ReduceOposantResistance")
                        .HasColumnType("smallint")
                        .HasColumnName("reduceoposantresistance");

                    b.Property<long>("ReputPrice")
                        .HasColumnType("bigint")
                        .HasColumnName("reputprice");

                    b.Property<byte>("ReputationMinimum")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("reputationminimum");

                    b.Property<byte>("RequiredClass")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("requiredclass");

                    b.Property<byte>("SecondaryElement")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("secondaryelement");

                    b.Property<long>("SellToNpcPrice")
                        .HasColumnType("bigint")
                        .HasColumnName("selltonpcprice");

                    b.Property<byte>("Sex")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("sex");

                    b.Property<short>("ShellMaximumLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("shellmaximumlevel");

                    b.Property<short>("ShellMinimumLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("shellminimumlevel");

                    b.Property<byte>("ShellType")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("shelltype");

                    b.Property<bool>("ShowDescriptionOnHover")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showdescriptiononhover");

                    b.Property<bool>("ShowSomethingOnHover")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showsomethingonhover");

                    b.Property<bool>("ShowWarningOnUse")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showwarningonuse");

                    b.Property<bool>("SoundOnPickup")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("soundonpickup");

                    b.Property<byte>("SpPointsUsage")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("sppointsusage");

                    b.Property<byte>("Speed")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("speed");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<bool>("UnknownFlag13")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("unknownflag13");

                    b.Property<bool>("UseReputationAsPrice")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("usereputationasprice");

                    b.Property<short>("WaitDelay")
                        .HasColumnType("smallint")
                        .HasColumnName("waitdelay");

                    b.Property<byte>("WaterElement")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("waterelement");

                    b.Property<short>("WaterResistance")
                        .HasColumnType("smallint")
                        .HasColumnName("waterresistance");

                    b.Property<byte>("Width")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.ToTable("items", (string)null);
                });

            modelBuilder.Entity("Database.Item.ItemTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<short>("ItemId")
                        .HasColumnType("smallint")
                        .HasColumnName("itemid");

                    b.Property<int>("Language")
                        .HasColumnType("int")
                        .HasColumnName("language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("items_translations", (string)null);
                });

            modelBuilder.Entity("Database.World.Map", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<int>("Bgm")
                        .HasColumnType("int")
                        .HasColumnName("bgm");

                    b.Property<byte>("DropRate")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("droprate");

                    b.Property<byte>("ExpRate")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("exprate");

                    b.Property<byte>("GoldRate")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("goldrate");

                    b.Property<short>("Height")
                        .HasColumnType("smallint")
                        .HasColumnName("height");

                    b.Property<bool>("IsPvpAllowed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ispvpallowed");

                    b.Property<bool>("IsShopAllowed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isshopallowed");

                    b.Property<byte[]>("MapGrid")
                        .IsRequired()
                        .HasColumnType("longblob")
                        .HasColumnName("mapgrid");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<short>("Width")
                        .HasColumnType("smallint")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.ToTable("maps", (string)null);
                });

            modelBuilder.Entity("Database.Item.BCard", b =>
                {
                    b.HasOne("Database.Item.Item", null)
                        .WithMany("BCards")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("Database.Item.ItemTranslation", b =>
                {
                    b.HasOne("Database.Item.Item", "Item")
                        .WithMany("Translations")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Database.Item.Item", b =>
                {
                    b.Navigation("BCards");

                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
